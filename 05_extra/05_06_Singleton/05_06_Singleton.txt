============================== Step 2 ==============================
Класс Singleton

Шаблон проектирования Singleton применяется, когда в программе должно
быть не более одного экземпляра некоторого класса. Например, это
может быть класс операционной системы (или БД). И было бы странно,
если бы было несколько экземпляров такого класса в программе.

struct Singleton {
  // 3. Возможность создать единственный возможный экземпляр класса
  static Singleton & instance() {
    static Singleton s; // это и есть единственный экземпляр
    return s; // возвращаем результат по ссылке -- это единственный
              // вариант без копирования объектов
  }

  // Чтобы создать единственный экземпляр класса Singleton, надо
  // вызвать метод instance, и во время его первого вызова будет
  // вызван конструктор у переменной типа Singleton. Так как это
  // статическая локальная переменна, она будет существовать до конца
  // работы всей программы. И дальше получать доступ к единственному
  // экземпляру можно будет, вызывая метод instance


  Data & data () { return data_; }
private:
  // 1. делаем все конструкторы приватными
  Singleton () {}

  // 2. копирование и присваивание тоже делаем приватными
  // Это гарантия того, что никакой внешний код не создат экземпляры
  // класса Singleton
  Singleton(Singleton const&);
  Singleton& operator=(Singleton const&);

  Data data_; 
};

============================== Step 3 ==============================
Использование Sigleton-а

int main () {
  // первое обращение
  Singleton & s = Singleton::instance(); // в этот момент создается
  // единственный объект класса Singleton
  Data d = s.data();

  // аналогично d = s.data();
  d = Singleton :: instance (). data (); // тут вернется ссылка на тот
  // же самый объект, который был создан при первом вызове.
  return 0; 
}

============================== Step 4 ==============================
