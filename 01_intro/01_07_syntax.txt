============================== Step 2 ==============================
Типы:

I. Целочисленные
   1) char (символьный тип данных, 1 байт)
   2) short int (меньше чем int и long int)
   3) int (в большинстве случаев 4 байта)
   4) long int ()
   Могут быть беззнаковыми (unsigned): 

   а)-2^(n -1 )... (2^(n-1) -1), где
   n - число бит (например: char -128..127 или ансайнд 0..255, int 2^-31...2^-31 - 1)
   б) 0..2^n - 1 для unsigned

II. Числа с плавающей точкой:
    1. float - 4 байта, 7 значащих цифр (используется для экономии памяти)
    2. double - 8 байта, 15 значащих цифр (разумно использовать на практике, меньше погрешность)

III. Логический тип bool

IV. Пустой тип void (например, функция не возвращает значения)

============================== Step 3 ==============================
Литералы

I. Целочисленные
   1) 'a' - код буквы 'a', тип char
   2) 42 - все целые числа по дефолту типа int
   3) 123456789L - суффикс L означает тип long
   4) 1703U - unsigned int
   5) 2128506UL - unsigned long int

II. Числа с плавающей точкой:
    1) 3.14 - все числа с точкой по дефолту типа double
    2) 2.71F - float
    3) 3.0E8 - 3.0 * 10^8

III. Логический тип bool
     true и false

Строки задаются в двойных кавычках: "Text string"

============================== Step 4 ==============================
Переменные

сначала тип, потом имя, начальное значение или инициализация (опционально)
int i = 10;
short j = 20; # произойдет преобразование из int в short, лучше избегать такое
bool b = false;
unsigned long l = 123123; # тоже будет произведено преобразование из int в unsigned int

double x = 13.5, y = 3.1415; # не очень удобно для реальных проектов
float z; # корректно, но плохо на практике -- неясно что там записано, надо инициализировать всегда

Нельзя оставлять переменные неинициализированными
Нельза создавать переменную пустого типа void

============================== Step 5 ==============================
Операции

1) Присваевание = 
int i = 10;
2) Арифметические
   а) бинарные: + - * / %
   i = (20 * 3) % 7; # остаток деления 60 на 7 = 4
   б) унарные (только для целочисленных): ++ -- 
   int k = i++; # значение i до инкремента: 4 (после присвания i = 5)
   int l = --i; # значение i после декремента: 4 (потому что от 5 отнимаем 1)

3) Логические
   а) бинарные && ||
   bool b = !(k == 1) # 
   b = (a == 0) || (1 / a < 1); #
   б) унарные ! (отрицание)

4) Сравнение == != > < >= <=
5) Приведение типов (type)
   double d = 3.1415;
   float f = (int)d; # привести дабл к инт с округлением -- 3
6) Сокращенные версии бинарных операторов += -= .= %=
// d = d * (i + k)
   d *= i + k;

============================== Step 6 ==============================
Инструкции

Порядок вычислений внутри инструкций не определен
/* undefined behavior */
int i = 10;
i = (i += 5) + (i * 4); // потому что если первая скобка первая, то буде 15 + 60 = 75, если вторая - 55
   
Такие выражения запрещены!

Можно использовать блоки выражений с вложенной области видимости
int k = 10;
{
	int k = 5 * i; // не видна за пределами блока
	i = (k += 5) + 5;
}
k = k + 1; # будет равна 10 как до блока

============================== Step 7 ==============================
Условные операторы

1) if

int d = b * b - 4 * a * c;
if (d > 0) {
   roots = 2;
} else if (d == 0) {
  roots = 1;
} else {
  roots = 0;
}

2) Тернарный условный оператор
int roots = 0;
if (d >= 0)
   roots = (d > 0)? 2 : 1;

============================== Step 8 ==============================
Циклы

1) Цикл while

int squares = 0;
int k = 10;
while (k < 10){
      squares += k * k;
      k = k + 1;
}
2) Цикл for
for (int k = 0; k < 10; k = k + 1) {
    squares += k * k;
}

Для бесконечного цикла while (true) { ... }
или for (;;;) { ... }

Для выхода из цикла используется оператор break

Если цикл находится внутри функции, то выйти можно также через
оператор return

============================== Step 9 ==============================
Функции

1) В сигнатуре функции указывается тип возвращаемого значения и типы
параметров

2) Ключевое слово return возвращает значение

double square(double x) {
       return x * x;
}

3) Переменные внутри функции -- локальные

4) Функция может возвращать void

5) Параметры передаются по значению (копируются)

// функция ничего не модифицирует за своими пределами
void strange(double x, double y){
     x = y;
}

============================== Ste[ 10 ==============================
Макросы

1) Макросы в С++ это инструкции препроцессора

2) Препроцессор С++ является самостоятельным языком, работающим с
произвольными строками

3) Макросы можно использовать для определения "функций":
int max1 (int x, int y) {
    return x > y ? x : y;
}

#define max2(x, y) x > y ? x : y

a = b + max2(c, d); // b + c > d ? c : d;

4) Препроцессор не знает про синтаксис С++

Как избежать проблемы?

1) Параметры макросов нужно оборачивать в скобки
#define max3(x, y) ((x) > (y) ? (x) : (y))
2) Это не избавляет от всех проблем
int a = 1;
int b = 1;
inc c = max3(++a, b); // ожидаем ответ с = 2, НО
// c = ((++a) > (b) ? (++a) : (b)) -- будет 3 вместо 2

3) Определять функции через макросы - плохая идея
4) Макросы можно использовать для условной компиляции
#ifdef DEBUG
 // дополнительные проверки
#endif

============================== Step 12 ==============================
Ввод-вывод

1) Будем использовать библиотеку <iostream>
#include <iostream>
using namespace std; // чтобы не указывать префикс имен функций std.

2) Ввод
int a = 0;
int b = 0;
cin >> a >> b;

3) Вывод
cout << "a + b = " << (a + b) << endl; // endl -- перевод строки

============================== Step 14 ==============================
Целочисленные типы в C++.

Все целочисленные типы (кроме char) являются знаковыми. Беззнаковые
версии типов определяется с ключевым словом unsigned, например:
unsigned short int, unsigned int или unsigned long int. Для симметрии
в языке предусмотренно явное указание того, что тип является знаковым
— ключевое слово signed (используется редко).

Более того, C++ допускает использование следующих сокращений:

    unsigned вместо unsigned int short вместо short int long вместо
    long int

Тип char в языке C++ является особенным: стандарт не оговаривает
является ли тип char знаковым или беззнаковым и полагаться на это не
стоит. Если вам нужна именно беззнаковая версия используйте unsigned
char явно, если же вам нужна знаковая используйте signed char. При
этом все три типа (char, unsigned char, signed char) являются тремя
различными типами.

Цикл do while.

Кроме циклов for и while, в C++ есть еще цикл do ... while:

do { // тело цикла } while (условие);

Он похож на цикл while, однако условие проверяется после тела цикла, а
не до.

Операции инкремента и декремента.  int a = 10; // a = 10 int b = ++a;
// префиксный инкремент возвращает новое значение => b = 11 и a = 11
int c = a++; // постфиксный инкремент возвращает старое значение => с
= 11 и a = 12

============================== Step 15 ==============================
    Потоки ввода и вывода.

Чтобы успешно сдавать задачи, вам необходимо познакомиться с потоками
ввода/вывода. Мы будем пользоваться стандартной библиотекой
iostream. Чтобы подключить библиотеку iostream нужно включить
заголовок iostream:

#include <iostream>
using namespace std;

Чтобы вывести что-то в поток вывода используется следующий синтаксис:

cout << "Some string "; cout << 3.14 << " " << 0;

В результате этого кода будет выведен текст "Some string 3.14
0". Обратите внимание, что библиотека iostream не вставляет
автоматически никаких пробелов, поэтому мы явно используем строку " "
для разделения. Кроме того обратите внимание, что можно "сцеплять"
несколько операций вывода в одну.

Ввод значений во многом симметричен, но для ввода используется cin и
оператор >>:

int a, b; cin >> a >> b;

Но в отличие от вывода, при вводе пробелы отбрасываются. Так что код
выше прочитает два числа и в случае, если на вход подана строка "10
20", и в случае, если на вход подана строка " 10 20 ".
