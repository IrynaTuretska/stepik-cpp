============================== Step 2 ==============================
Строки -- это массивы символов типа char, заканчивающиеся нулевым символом

// массив 'H', 'e', 'l', 'l', 'o', '\0'
char s[] = "Hello";

Строки могут содержать управляющие последовательности
1) \n перевод строки
2) \t символ табуляции
3) \\  символ '\'
3) \"  символ '"
4) \0 нулевой символ

cout << "List:\n\t- C,\n\t- C++.\n";

http://en.cppreference.com/w/cpp/language/escape

============================== Step 3 ==============================
Работа со строками в стиле С

Библиотека cstring предлагает множество функций для работы со строками (char *)

char s1[100] = "Hello";
cout << strlen(s1) << endl; // 5

char s2[] = ", world!";
strcat(s1, s2); // Hello, world!
	   // strcat дописывает вторую строку к первой, поэтому всегда
	   // надо проверять, есть ли достаточно места! В нашем случае s1
	   // это массив из 100 char

// это коды символов H e l l o
char s3[6] = {72, 101, 108, 108, 111};
if (strcmp(s1, s3) == 0)
   cout << "s1 == s3" << end;

// если закомментить strcat, то операция сравнения дала бы истинный результат

Работа со строками в стиле С предполагает кропотливую работсу с ручным
выделением памяти

============================== Step 4 ==============================
Работа со строками в стиле С++

Библиотека string предлагает обертку над строками, которая позволяет
упростить все операции над строками

#include <string>
using namespace std;

int main() {
    string s1 = "Hello";
    cout << s1.size() << endl; // 5

    string s2 = ", world!";
    s2 = s1 + s2;

    if (s1 == s2)
        cout << "s1 == s2" < endl;

    return 0;
}

============================== Step 5, 6 ==============================
Ввод-вывод в стиле С

Библиотека cstdio предлагает функции для работы со стандартным
вводом-выводом

Для вывода использует функция printf

#include <cstdio>

int main() {
  int h = 20;
  int m = 14;
  printf("Time: %d:%d\n", h, m);
  printf("It's %.2f hours to midnight\n",
  	       ((24 - h) * 60.0 - m) / 60);
  return 0;
}

Для ввода используется фугкция scanf

#include <cstdio>

int main() {
    int a = 0, b = 0;
    printf("Enter a and b: ");
    scanf("%d %d", &a, &b);
    printf("a + b = %d\n", (a + b));

    return 0;
}

Ввод-вывод в стиле С достаточно сложен и небезопасен (типы аргументов
не проверяются)

============================== Step 7 ==============================
Ввод-вывод в стиле С++

реализуется через библиотеку iostream

#include <string>
#include <iostream>
using namespace std;

int main() {
    string name;
    cout << "Enter your name: ";
    cin >> name ; // считывается слово
    cout << "Hi, " << name << endl;

    return 0;
}

Реализация ввода-вывода в стиле С++ типобезопасна

============================== Step 8 ==============================
Работа с файлами в стилое С++

#include <string>
#include <fstream>
using namespace std;

int main() {
    string name;
    ifstream input("input.txt"); // открываем файл на чтение --
    //    переменная input типа ifsream
    input >> name;

    ofstream output("output.txt");
    output << "Hi, " << name << endl;
    return 0;
}

Файлы закроются при выходе из функции.

============================== Step 10 ==============================
Напишите программу, которая читает символы входного потока и выводит
их в выходной поток, заменяя несколько подряд идущих пробелов одним, а
также удаляет все лидирующие и завершающие пробелы. Эту задачу можно
решить без динамического выделения памяти.

// Задачу решал посимвольным считыванием.  ИМХО нет смысла городить
// что то сложнее.

// По простому: напишите split для std::string. Уместилось в 25 строк
// со всеми инклюдами. 

Source: split.cpp

