// Функция, определяющая длину отрезка
double length(double x1, double y1, double x2, double y2);

// функция, проверяющая пересечение отрезков
bool intersects(double x11, double y11,
		double x12, double y12,
		double x21, double y21,
		double x22, double y22,
		double * xi, double * yi);

struct Point {
  double x;
  double y
};

struct Segment {
  Point p1;
  Point p2;
};

double length(Segment s);

bool intersects(Segment s1, Segment s2, Point * p);

// Работа со труктурами

#include <cmath>

// Доступ к полям структуры через .
double length(Segement s) {
  double dx = s.p1.x - s.p2.x;
  double dy = s.p1.y - s.p2.y;
  return sqrt(dx * dx - dy * dy);
}

// Доступ к полям через -> в случае указателей
double length(Segment * s) {
  double dx = s->p1.x - s->p2.x; // иначе можно записать (*s).p1.x
  double dy = s->p1.y - s->p2.y;
  return sqrt(dx * dx - dy * dy);
}

// Инициалищация структур
//           x    y
Point p1 = {0.4, 1.4};
Point p2 = {1.2, 6.3};
Segment s = {p1, p2};

struct IntArray2D {
  size_t a;
  size_t b;
  int ** data;
};

IntArray2D a = {n, m, create_Array2d(n, m)};

// Методы -- функции, определенные внутри структуры
#include <iostream>
using namespace std;

struct Segment {
  Point p1;
  Point p2;
  double length() {
    double dx = p1.x - p2.x;
    double dy = p1.y - p2.y;
    return sqrt(dx * dx - dy * dy);
  }
};

int main() {
  Segment s = {{0.4, 1.4}, {1.2, 6.3}};
  cout << s.length() << endl; //
}



// this - текущий экземпляр структуры. Может быть удобен при совпадении имен

struct Point {
  double x;
  double y;
  void shift(double x, double y) {
    this -> x += x;
    this -> y += y;
  }
};

// Методы можно разделять на объявление и определение

//
struct Point {
  double x;
  double y;
  void shift(double x, double y);
};

// в это в заголовочном файле hpp
void Point::shift(double x, double y) {
  this -> x += x;
  this -> y += y;  
}

// Абстракция и инкапсуляция

// Использование методов позволяет объединить даные функции для работы с ними.

sruct IntArray2D {
  int & get (size_t i, size_t j) {
    return data[i * b + j];
  }
  size_t a;
  size_t b;
  int * data;
};

IntArray2D m = foo();
for (size_t i = 0; i != m.a; ++i) {
  for (size_t j = 0; j != m.b; ++j) {
    if (m.get(i, j) < 0)
      m.get(i, j) = 0;
  }
}


// Конструкторы
struct Point {
  // первый конструктор
  Point() {
    x = y = 0; // y = 0, x = y, i.e. x = 0
  }
  // второй конструктор
  Point(double x, double y) {
    this -> x = x;
    this -> y = y;
  }
  double x;
  double y;
};

Point p1; // initialized to {0, 0}
Point p2(3, 7);

// Список инициализации позволяет проинициализировать поля до входа в конструктор
// Инициализация полей в списке инициализации происходит в порядке объявления полей в структуре
struct Point {
  Point() : x(0), y(0)
  { }
  // this -> x = x, this -> y = y, которые подаются в качестве аргумента при инициализации 
  Point(double x, double y) : x(x), y(y)
  { }
  double x;
  double y;
};

// Значения по умолчанию
// Значение параметров по умолчанию нужно указывать в объявлении функции

struct Point {
  Point(double x = 0, double y = 0): x(x), y(y)
  { }
  double x;
  double y;
};

Point p1;
Point p2(2);
Point p3(3, 4);

// Конструкторы от одного параметра
// Конструкторы от одного параметра задют неявное пользовательское преобразование

struct Segment {
  Segment() {}
  Segment(double length)
    : p2(length, 0)
  {}
  Point p1;
  Point p2;
};

Segment s1; // {{0, 0}, {0, 0}}
Segment s2(10); // {{0, 0}, {10, 0}}
Segment s3 = 20; // {{0, 0}, {20, 0}} = Segment(20)

// Для того чтобы запретить неявное пользовательское преобразование,
// используется ключевое слово explicit

struct Segment {
  Segment() {}
  explicit Segment(double length)
    : p2(length, 0)
  {}
  Point p1;
  Point p2;
};

Segment s1; // {{0, 0}, {0, 0}}
Segment s2(10); // {{0, 0}, {10, 0}}
Segment s3 = 20; // error

// Неявное пользовательское преобразование задается также
// конструкторами, которые могут принимать один параметр

struct Point {
  explicit Point(double x = 0, double y = 0)
    : x(x), y(y)
  {}
  double x;
  double y;
};

Point p1;
Point p2(2);
Point p3(3, 4);
Point p4 = 4; // error

// Конструктор по умолчанию

// Если у структуры нет конструкторов, то конструктор без параметров,
// конструктор по умолчанию, генерируется компилятором

struct Segment {
  Segment(Point p1, Point p2)
    : p1(p1), p2(p2)
  {}
  Point p1;
  Point p2;
};

Segment s1; // error, потому что конструктор предусматривает
	    // инициализацию только с параметрами указанными явно

Segment s2(Point(), Point(2, 1));

// Особенности синтаксиса С++

// Если что-то похоже на объявление функции, то это и есть объявление
// функции

struct Point {
  explicit Point(double x = 0, double y = 0)
    : x(x), y(y)
  {}
  double x;
  double y;
};

Point p1; // Определение переменной
Point p2(); //Объявление функции, которая возвращает значение типа
	    //Point, которая называется p2 и не принимает никаких
	    //аргументов
 

double k = 5.1;
// округлить до целого k можно через оператор приведения, который
// бывает в двух формах (они равнозначны)
// int(k) 
// (int)k
Point p3(int(k)); // это объявление ф-ции, круглые скобки вокруг k игнорируются
Point p4((int)k); // определение переменной


// Деструктор

// Деструктор -- это метод, который вызывается при удалении структуры,
// генерируемой компирятором

struct IntArray {
  explicit IntArray(size_t size)
    : size(size)
    , data(new int[size]) // при создании выделяем память
  {}
  ~IntArray() {
    delete [] data; // при удалении освобождаем память
  }
  size_t size;
  int * data;
};

// Время жизни

// Время жизни -- это временной интервал между вызовами конструктора и
// деструктора

void foo() {
  IntArray a1(10); // создание a1
  IntArray a2(20); // создание а2
  for (size_t i = 0; i != a1.size; ++i) {
    IntArray a3(30); // создание a3
    ...
      } // удаление a3
} // удаление a2, потом a1

// Деструкторы переменных на стеке вызываются в обратном порядке (по
// отношению к порядку вызова конструкторов

============================== Step 7 ==============================

В этой и последующих задачах мы создадим свой простой аналог
стандартного класса string для удобного управления строками. Начнем мы
с написания конструктора. В этой задаче вам требуется реализовать
конструктор, который копирует C-строку во внутренний массив, попутно
кешируя длину строки. Т. е. в результате работы конструктора в поле
str_ должен оказаться указатель на C-строку c копией исходной строки,
в поле size_ длина строки без учета завершающего нулевого
символа. Подсказка: функции определенные в заголовке cstring могут
оказаться полезными.


Sample Input:
There is no test input

Sample Output:
OK

Memory Limit: 256 MB
Time Limit: 5 seconds

Source: str.cpp

============================== Step 8 ==============================

Конструкторов может быть несколько, поэтому добавим еще один. Напишите
конструктор, который заполняет строку повторениями заданного символа.

Sample Input:
There is no test input

Sample Output:
OK

Memory Limit: 256 MB

Source: str2.cpp

============================== Step 12 ==============================
Теперь добавьте в String деструктор, который освободит память,
выделенную под внутренний массив, при уничтожении объекта
String. (Конструктор класса переписывать заново не нужно.)

Sample Input:
There is no test input

Sample Output:
OK

Memory Limit: 256 MB
Time Limit: 5 seconds

Source: str.cpp

============================== Step 13 ==============================

Теперь добавим к нашему классу пару полезных методов доступа. Для
строки полезно уметь получить ее длину (size) и уметь обращаться к
отдельным символам строки по индексу (at). Кроме этого иногда нужно
уметь преобразовать значение класса строки в обычную C-строку
(c_str). Последняя возможность нужна, например, чтобы вызывать функции
какой-нибудь С библиотеки. Другой пример, когда нужна C-строка -
конструктор стандартного C++ класса fstream, который принимает имя
файла как C-строку (ранее создать поток можно было только с помощью
C-строки, в стандарте 2011 года эту оплошность поправили).

Sample Input:
There is no test input

Sample Output:
OK

Memory Limit: 256 MB
Time Limit: 5 seconds

Source: str.cpp

============================== Step 14 ==============================

Еще одна полезная возможность — это сравнение строк. Вам необходимо
реализовать метод compare, который возвращает значение < 0, если
строка-аргумент лексикографически больше, чем строка у которой этот
метод вызван, 0, если они равны, и значение > 0, если аргумент
меньше. Подсказка: поищите внимательно в заголовочном файле cstring.

Sample Input:
There is not test input

Sample Output:
OK

Memory Limit: 256 MB
Time Limit: 5 seconds

Source: str.cpp
