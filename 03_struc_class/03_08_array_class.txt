============================== Step 2, 3, 4 ==============================


struct IntArray {
  // 1. Консутруктор с инициализацией массива нулями
  // explicit -- запрет неявного преобразования
  explicit IntArray(size_t size) 
  : size_(size), data_(new size_t[size]) { 
    for (size_t i = 0; i != size_; ++i) 
      data_[i] = 0;
  }

  // 2. Конструктор копирования
  IntArray(IntArray const& a)
  : size_(a.size_), data_(new int[size_]) { 
    for (size_t i = 0; i != size_; ++i)
      data_[i] = a.data_[i];
  }
  // Деструктор
  ~IntArray() {
    delete [] data_;
  }

  // Оператор присваивания
  IntArray & operator=(IntArray const& a) { if (this != &a)
      IntArray(a).swap(*this); return *this;
  }
  // Вспомогаетльная функция
  void swap(IntArray & a) { 
    std::swap(size_, a.size_); std::swap(data_, a.data_);
  }

  // Размер массива
  size_t size() const { return size_; }

  // Доступ к элементу массива - константная версия
  int get(size_t i) const { 
    return data_[i];
  }

  // Возвращает элемент массива по ссылке -- поэтому можно изменять
  // значение массива
  int & get(size_t i) {
    return data_[i]; }

  // Изменение массива -- аналогично оператору присваивания
  void resize(size_t nsize) {
    IntArray t(nsize);
    // если новый размер больше старого, то копируем все, если меньше,
    // то копируем только то, что сможем
    size_t n = nsize > size_ ? size_ : nsize; 
    for (size_t i = 0; i != n; ++i)
      t.data_[i] = data_[i]; swap(t);
  }

private:
  size_t size_; // размер массива
  int * data_;  // указатель на динамический массив, в котором хранятся данные
};
